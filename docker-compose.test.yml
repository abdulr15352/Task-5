services:
  test_voting_db:
    image: postgres:15
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=voting_db_test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  test_runner:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      test_voting_db:
        condition: service_healthy
    environment:
      # environment variables for the test runner
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_EXPIRATION_MINUTES=${JWT_EXPIRATION_MINUTES}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=voting_db_test
      - POSTGRES_HOST=test_voting_db
      - POSTGRES_PORT=5432
      - ADMIN_API_TOKEN=${ADMIN_API_TOKEN}
      
      # Test specific environment variables
      - RUNTIME=test
      - TEST_DB_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@test_voting_db:5432/voting_db_test

      # Python path for imports 
      - PYTHONPATH=/app
    volumes:
      - ./:/app:ro
      - ./test_reports:/app/test_reports # Volume for test reports
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'Creating test reports directory...' &&
        mkdir -p test_reports &&
        echo 'Initializing fresh test database...' &&
        python -c 'from db.DbModels import Base; from db.DbConfig import Engine; Base.metadata.drop_all(bind=Engine); Base.metadata.create_all(bind=Engine)' &&
        echo 'Running tests...' &&
        TIMESTAMP=$(date +%Y%m%d_%H%M%S) &&
        echo 'Test run timestamp: ' $TIMESTAMP &&
        pytest tests/ -v --tb=short --junitxml=test_reports/junit.xml --html=test_reports/report.html --self-contained-html
      "
